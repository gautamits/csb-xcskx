{"version":3,"sources":["App.js","index.js"],"names":["buttonConfig","number","chars","App","React","useState","text","setText","onChange","type","char","slice","console","log","className","value","map","Button","onClick","e","props","timer","useRef","mode","counter","holdTime","pressTime","allChars","clearTimeout","current","length","setInterval","join","rootElement","document","getElementById","ReactDOM","render"],"mappings":"4LAGMA,EAAe,CACnB,CAAEC,OAAQ,IAAKC,MAAO,IACtB,CAAED,OAAQ,IAAKC,MAAO,CAAC,IAAK,IAAK,MACjC,CAAED,OAAQ,IAAKC,MAAO,CAAC,IAAK,IAAK,MACjC,CAAED,OAAQ,IAAKC,MAAO,CAAC,IAAK,IAAK,MACjC,CAAED,OAAQ,IAAKC,MAAO,CAAC,IAAK,IAAK,MACjC,CAAED,OAAQ,IAAKC,MAAO,CAAC,IAAK,IAAK,MACjC,CAAED,OAAQ,IAAKC,MAAO,CAAC,IAAK,IAAK,IAAK,MACtC,CAAED,OAAQ,IAAKC,MAAO,CAAC,IAAK,IAAK,MACjC,CAAED,OAAQ,IAAKC,MAAO,CAAC,IAAK,IAAK,IAAK,OAGzB,SAASC,IACtB,MAAwBC,IAAMC,SAAS,IAAvC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,SAASC,EAAT,GAAmC,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACxB,OAAQD,GACN,IAAK,SACHF,EAAQD,EAAOI,GACf,MACF,IAAK,UACHH,EAAQD,EAAKK,MAAM,GAAI,GAAKD,GAC5B,MACF,IAAK,QACHH,EAAQ,IACR,MACF,QACEK,QAAQC,IAAI,mBAAoBJ,IAGtC,OACE,sBAAKK,UAAU,MAAf,UACE,0BAAUC,MAAOT,IACjB,qBAAKQ,UAAU,UAAf,SACGd,EAAagB,KAAI,gBAAGf,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,OAChB,cAACe,EAAD,CAAQhB,OAAQA,EAAQC,MAAOA,EAAOM,SAAUA,SAGpD,sBAAKM,UAAU,UAAf,UACE,wBAAQA,UAAU,QAAQI,QAAS,SAACC,GAAD,OAAOX,EAAS,CAAEC,KAAM,WAA3D,mBAGA,wBACEK,UAAU,QACVI,QAAS,SAACC,GAAD,OAAOX,EAAS,CAAEC,KAAM,SAAUC,KAAM,OAFnD,mBAMA,wBACEI,UAAU,QACVI,QAAS,SAACC,GAAD,OAAOX,EAAS,CAAEC,KAAM,UAAWC,KAAM,MAFpD,6BAWR,SAASO,EAAOG,GACd,IAAMC,EAAQjB,IAAMkB,OAAO,MACrBC,EAAOnB,IAAMkB,OAAO,UACpBE,EAAUpB,IAAMkB,OAAO,GAErBrB,EAA0DmB,EAA1DnB,OAAR,EAAkEmB,EAAlDlB,aAAhB,MAAwB,GAAxB,KAAkEkB,EAAtCK,SAAsCL,EAArBM,kBAA7C,MAAyD,IAAzD,EACMC,EAAQ,sBAAOzB,GAAP,CAAcD,IAmB5B,OACE,yBAAQa,UAAU,cAAcI,QAnBlC,SAAkBC,GAEhB,GADAS,aAAaP,EAAMQ,SACfL,EAAQK,SAAWF,EAASG,OAG9B,OAFAP,EAAKM,QAAU,cACfL,EAAQK,QAAU,GAGpBT,EAAMZ,SAAS,CACbC,KAAMc,EAAKM,QACXnB,KAAMiB,EAASH,EAAQK,WAEzBN,EAAKM,QAAU,UACfL,EAAQK,QAAUL,EAAQK,QAAU,EACpCR,EAAMQ,QAAUE,aAAY,WAC1BR,EAAKM,QAAU,SACfL,EAAQK,QAAU,IACjBH,IAGH,UACE,+BAAOzB,IACP,sBAAMa,UAAU,OAAhB,SAAwBZ,EAAM8B,KAAK,SCrFzC,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAClC,EAAD,MAEF8B,K","file":"static/js/main.4de859f8.chunk.js","sourcesContent":["import \"./styles.css\";\nimport React from \"react\";\n\nconst buttonConfig = [\n  { number: \"1\", chars: [] },\n  { number: \"2\", chars: [\"a\", \"b\", \"c\"] },\n  { number: \"3\", chars: [\"d\", \"e\", \"f\"] },\n  { number: \"4\", chars: [\"g\", \"h\", \"i\"] },\n  { number: \"5\", chars: [\"j\", \"k\", \"l\"] },\n  { number: \"6\", chars: [\"m\", \"n\", \"o\"] },\n  { number: \"7\", chars: [\"p\", \"q\", \"r\", \"s\"] },\n  { number: \"8\", chars: [\"t\", \"u\", \"v\"] },\n  { number: \"9\", chars: [\"w\", \"x\", \"y\", \"z\"] }\n];\n\nexport default function App() {\n  const [text, setText] = React.useState(\"\");\n\n  function onChange({ type, char }) {\n    switch (type) {\n      case \"insert\":\n        setText(text + char);\n        break;\n      case \"replace\":\n        setText(text.slice(0, -1) + char);\n        break;\n      case \"clear\":\n        setText(\"\");\n        break;\n      default:\n        console.log(\"no such handler \", type);\n    }\n  }\n  return (\n    <div className=\"App\">\n      <textarea value={text} />\n      <div className=\"buttons\">\n        {buttonConfig.map(({ number, chars }) => (\n          <Button number={number} chars={chars} onChange={onChange} />\n        ))}\n      </div>\n      <div className=\"buttons\">\n        <button className=\"clear\" onClick={(e) => onChange({ type: \"clear\" })}>\n          CLEAR\n        </button>\n        <button\n          className=\"clear\"\n          onClick={(e) => onChange({ type: \"insert\", char: \" \" })}\n        >\n          SPACE\n        </button>\n        <button\n          className=\"clear\"\n          onClick={(e) => onChange({ type: \"replace\", char: \"\" })}\n        >\n          backspace\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction Button(props) {\n  const timer = React.useRef(null);\n  const mode = React.useRef(\"insert\"); // 'insert' or 'replace'\n  const counter = React.useRef(0);\n\n  const { number, chars = [], holdTime = 2000, pressTime = 1000 } = props;\n  const allChars = [...chars, number];\n  function onChange(e) {\n    clearTimeout(timer.current);\n    if (counter.current >= allChars.length) {\n      mode.current = \"insert\";\n      counter.current = 0;\n      return;\n    }\n    props.onChange({\n      type: mode.current,\n      char: allChars[counter.current]\n    });\n    mode.current = \"replace\";\n    counter.current = counter.current + 1;\n    timer.current = setInterval(() => {\n      mode.current = \"insert\";\n      counter.current = 0;\n    }, pressTime);\n  }\n  return (\n    <button className=\"flex column\" onClick={onChange}>\n      <span>{number}</span>\n      <span className=\"flex\">{chars.join(\"\")}</span>\n    </button>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}